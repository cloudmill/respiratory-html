.btn {
  $component: &;
  $transition: transition(minor);

  --height: #{rem(60px)};
  --padding: #{rem(40px)};

  display: flex;

  &--full {
    #{$component} {
      &__btn {
        width: 100%;
      }
    }
  }

  &--radius {
    &--s {
      --radius: #{rem(4px)};
    }

    &--m {
      --radius: #{rem(6px)};
    }

    &--l {
      --radius: #{rem(8px)};
    }

    &--xl {
      --radius: #{rem(12px)};
    }
  }

  &__btn {
    $element: &;

    position: relative;
    z-index: 0;

    pointer-events: none;

    cursor: pointer;

    &:disabled {
      cursor: not-allowed;

      #{$component} {
        &__text {
          color: color(gray-dark);
          opacity: 0.3;
        }

        &__background {
          background-color: color(gray-light);
        }

        &__decoration {
          &::before {
            border-color: color(gray);
          }
        }
      }
    }

    @mixin hover {
      #{$component} {
        &__mask {
          &--main {
            height: 0;
          }

          &--second {
            height: var(--height);
          }
        }

        &__decoration {
          $move: rem(4px);

          &::before {
            $count: 3;

            @keyframes btn-decoration-opacity {
              from {
                opacity: 1;
              }

              to {
                opacity: 0;
              }
            }

            animation: btn-decoration-opacity
              math.div(duration(default), $count) timing-function(minor)
              ($count * 2) alternate;
          }

          &:nth-child(1) {
            transform: translate($move, -$move);
          }

          &:nth-child(2) {
            transform: translate(-$move, $move);
          }
        }

        &__icon {
          &:not(#{$component}__icon--static) {
            transform: translateX(rem(-8px));
          }
        }
      }
    }

    &:not(:disabled, #{$element}--no-hover, #{$element}--active) {
      &:hover,
      &:focus {
        @include hover;
      }
    }

    &--active {
      &:not(:disabled) {
        @include hover;
      }
    }
  }

  &__block {
    z-index: 0;

    height: var(--height);

    &--relative {
      position: relative;
    }

    &--absolute {
      @include inset;

      position: absolute;
    }
  }

  &__mask {
    will-change: auto;

    overflow: hidden;

    transition: height $transition;

    &--main {
      height: var(--height);
    }

    &--second {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;

      height: 0;
      display: flex;
      align-items: flex-end;
    }
  }

  &__place {
    position: relative;
    z-index: 0;

    width: 100%;
    height: var(--height);
  }

  &__content {
    padding: 0 var(--padding);
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    pointer-events: all;
    overflow: hidden;

    border-radius: var(--radius);
  }

  &__text {
    @include font-fsl("title-1", 13px, 100%);

    white-space: nowrap;
    transition: color $transition, opacity $transition;

    &--white {
      color: color(white);
    }

    &--black {
      color: color(black);
    }
  }

  &__background {
    @include inset;

    position: absolute;

    border-radius: var(--radius);
    transition: background-color $transition;

    // background

    &--blue {
      background-color: color(blue);
    }

    &--yellow {
      background-color: color(yellow);
    }

    &--white {
      background-color: color(white);
    }

    &--transparent {
      background-color: color(transparent);
    }

    // border

    &--border {
      @each $color in (gray, white) {
        &-#{$color} {
          border: 1px solid color($color);

          &-xl {
            border: 2px solid color($color);
          }
        }
      }
    }
  }

  &__decoration {
    $offset: rem(10px);
    $size: rem(10px);

    @include rectangle($size);

    position: absolute;
    transform: translate(0, 0);

    transition: transform $transition;

    &::before {
      @include inset;

      position: absolute;

      content: "";

      border: 1.5px solid transparent;
      border-top: none;
      border-right: none;
      border-radius: 0 0 0 50%;
      transition: border-color $transition;
    }

    &:nth-child(1) {
      bottom: $offset;
      left: $offset;
    }

    &:nth-child(2) {
      top: $offset;
      right: $offset;

      &::before {
        transform: rotate(180deg);
      }
    }

    &--yellow {
      &::before {
        border-color: color(yellow);
      }
    }

    &--black {
      &::before {
        border-color: color(black);
      }
    }
  }

  // ###

  &__icon {
    transform: translateX(0);

    flex-shrink: 0;

    transition: transform $transition;

    &--default {
      margin-right: rem(8px);

      #{$component} {
        &__img {
          @include rectangle(rem(24px));
        }
      }
    }
  }

  &__img {
    display: block;
  }
}
